{"ast":null,"code":"import { words as list } from './words.js';\nclass Words {\n  getMostPopular(count) {\n    return list.slice(0, count);\n  }\n  getMostPopularFilter(count, test) {\n    var result = [];\n    list.every(word => {\n      if (test(word)) {\n        result.push(word);\n      }\n      if (result.length == count) return false;\n      return true;\n    });\n    return result;\n  }\n  getMostPopularRegex(count, regex) {\n    var result = [];\n    list.every(word => {\n      if (word.match(regex)) {\n        result.push(word);\n      }\n      if (result.length == count) return false;\n      return true;\n    });\n    return result;\n  }\n  getMostPopularLength(count, length) {\n    var result = [];\n    list.every(word => {\n      if (word.length == length) {\n        result.push(word);\n      }\n      if (result.length == count) return false;\n      return true;\n    });\n    return result;\n  }\n\n  // Returns -1 if not found\n  getWordRank(word) {\n    for (var i = 0; i < list.length; i++) {\n      if (word == list[i]) return i;\n    }\n    return -1;\n  }\n\n  // \"position\" must be between 0 and getWordCount(), inclusive\n  getWordAtPosition(position) {\n    return list[position];\n  }\n  getWordCount() {\n    return list.length;\n  }\n  getAll() {\n    return list;\n  }\n}\nconst words = new Words();\nexport { words };","map":{"version":3,"names":["words","list","Words","getMostPopular","count","slice","getMostPopularFilter","test","result","every","word","push","length","getMostPopularRegex","regex","match","getMostPopularLength","getWordRank","i","getWordAtPosition","position","getWordCount","getAll"],"sources":["/Users/admin/Desktop/word-guess-game/node_modules/popular-english-words/index.js"],"sourcesContent":["import {words as list} from './words.js'\n\n\nclass Words {\n\n    getMostPopular(count) {\n        return list.slice(0, count)\n    }\n\n    getMostPopularFilter(count, test) {\n        var result = []\n        list.every(word => {\n            if (test(word)) {\n                result.push(word)\n            }\n            if (result.length == count) return false\n            return true\n        })\n        return result\n    }\n\n    getMostPopularRegex(count, regex) {\n        var result = []\n        list.every(word => {\n            if (word.match(regex)) {\n                result.push(word)\n            }\n            if (result.length == count) return false\n            return true\n        })\n        return result\n    }\n\n    getMostPopularLength(count, length) {\n        var result = []\n        list.every(word => {\n            if (word.length == length) {\n                result.push(word)\n            }\n            if (result.length == count) return false\n            return true\n        })\n        return result\n    }\n\n    // Returns -1 if not found\n    getWordRank(word) {\n        for(var i=0; i<list.length; i++) {\n            if (word == list[i]) return i\n        }\n        return -1\n    }\n\n    // \"position\" must be between 0 and getWordCount(), inclusive\n    getWordAtPosition(position) {\n        return list[position]\n    }\n\n    getWordCount() {\n        return list.length\n    }\n\n    getAll() {\n        return list\n    }\n}\n\nconst words = new Words()\n\nexport {words} \n"],"mappings":"AAAA,SAAQA,KAAK,IAAIC,IAAI,QAAO,YAAY;AAGxC,MAAMC,KAAK,CAAC;EAERC,cAAcA,CAACC,KAAK,EAAE;IAClB,OAAOH,IAAI,CAACI,KAAK,CAAC,CAAC,EAAED,KAAK,CAAC;EAC/B;EAEAE,oBAAoBA,CAACF,KAAK,EAAEG,IAAI,EAAE;IAC9B,IAAIC,MAAM,GAAG,EAAE;IACfP,IAAI,CAACQ,KAAK,CAACC,IAAI,IAAI;MACf,IAAIH,IAAI,CAACG,IAAI,CAAC,EAAE;QACZF,MAAM,CAACG,IAAI,CAACD,IAAI,CAAC;MACrB;MACA,IAAIF,MAAM,CAACI,MAAM,IAAIR,KAAK,EAAE,OAAO,KAAK;MACxC,OAAO,IAAI;IACf,CAAC,CAAC;IACF,OAAOI,MAAM;EACjB;EAEAK,mBAAmBA,CAACT,KAAK,EAAEU,KAAK,EAAE;IAC9B,IAAIN,MAAM,GAAG,EAAE;IACfP,IAAI,CAACQ,KAAK,CAACC,IAAI,IAAI;MACf,IAAIA,IAAI,CAACK,KAAK,CAACD,KAAK,CAAC,EAAE;QACnBN,MAAM,CAACG,IAAI,CAACD,IAAI,CAAC;MACrB;MACA,IAAIF,MAAM,CAACI,MAAM,IAAIR,KAAK,EAAE,OAAO,KAAK;MACxC,OAAO,IAAI;IACf,CAAC,CAAC;IACF,OAAOI,MAAM;EACjB;EAEAQ,oBAAoBA,CAACZ,KAAK,EAAEQ,MAAM,EAAE;IAChC,IAAIJ,MAAM,GAAG,EAAE;IACfP,IAAI,CAACQ,KAAK,CAACC,IAAI,IAAI;MACf,IAAIA,IAAI,CAACE,MAAM,IAAIA,MAAM,EAAE;QACvBJ,MAAM,CAACG,IAAI,CAACD,IAAI,CAAC;MACrB;MACA,IAAIF,MAAM,CAACI,MAAM,IAAIR,KAAK,EAAE,OAAO,KAAK;MACxC,OAAO,IAAI;IACf,CAAC,CAAC;IACF,OAAOI,MAAM;EACjB;;EAEA;EACAS,WAAWA,CAACP,IAAI,EAAE;IACd,KAAI,IAAIQ,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACjB,IAAI,CAACW,MAAM,EAAEM,CAAC,EAAE,EAAE;MAC7B,IAAIR,IAAI,IAAIT,IAAI,CAACiB,CAAC,CAAC,EAAE,OAAOA,CAAC;IACjC;IACA,OAAO,CAAC,CAAC;EACb;;EAEA;EACAC,iBAAiBA,CAACC,QAAQ,EAAE;IACxB,OAAOnB,IAAI,CAACmB,QAAQ,CAAC;EACzB;EAEAC,YAAYA,CAAA,EAAG;IACX,OAAOpB,IAAI,CAACW,MAAM;EACtB;EAEAU,MAAMA,CAAA,EAAG;IACL,OAAOrB,IAAI;EACf;AACJ;AAEA,MAAMD,KAAK,GAAG,IAAIE,KAAK,CAAC,CAAC;AAEzB,SAAQF,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}