{"ast":null,"code":"import React,{useState}from'react';import'./index.css';// Set the target word here\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TARGET_WORD='PLANT';const App=()=>{const[guesses,setGuesses]=useState([]);const[currentGuess,setCurrentGuess]=useState('');const[gameOver,setGameOver]=useState(false);const maxAttempts=10;const handleChange=e=>{setCurrentGuess(e.target.value.toUpperCase());};const handleSubmit=e=>{e.preventDefault();if(currentGuess.length!==5){alert('Please enter a 5-letter word.');return;}const feedback=getFeedback(currentGuess);const newGuesses=[...guesses,{word:currentGuess,feedback}];setGuesses(newGuesses);setCurrentGuess('');// Check for win or lose condition\nif(feedback.correct===5){setGameOver(true);alert('You did great!');}else if(newGuesses.length>=maxAttempts){setGameOver(true);alert('Out of attempts! Better luck next time.');}};const getFeedback=guess=>{let correct=0;let present=0;const targetArr=TARGET_WORD.split('');const guessArr=guess.split('');const targetLetterCount={};// Count occurrences of each letter in the target word\ntargetArr.forEach(letter=>{targetLetterCount[letter]=(targetLetterCount[letter]||0)+1;});// First pass: Count correct positions\nguessArr.forEach((letter,index)=>{if(letter===targetArr[index]){correct++;targetLetterCount[letter]--;guessArr[index]=null;// Mark as matched\n}});// Second pass: Count wrong positions\nguessArr.forEach(letter=>{if(letter&&targetLetterCount[letter]>0){present++;targetLetterCount[letter]--;}});return{correct,present};};return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Word Guess Game\"}),/*#__PURE__*/_jsx(\"div\",{className:\"board\",children:guesses.map((guessObj,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"guess-row\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"guess-word\",children:guessObj.word}),/*#__PURE__*/_jsxs(\"div\",{className:\"feedback\",children:[guessObj.feedback.correct>0&&/*#__PURE__*/_jsx(\"div\",{className:\"circle correct-circle\",children:guessObj.feedback.correct}),guessObj.feedback.present>0&&/*#__PURE__*/_jsx(\"div\",{className:\"circle present-circle\",children:guessObj.feedback.present}),guessObj.feedback.correct===0&&guessObj.feedback.present===0&&/*#__PURE__*/_jsx(\"div\",{className:\"circle absent-circle\",children:\"0\"})]})]},index))}),!gameOver&&/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:currentGuess,onChange:handleChange,maxLength:\"5\",placeholder:\"Enter a 5-letter word\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Submit\"})]})]});};export default App;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","TARGET_WORD","App","guesses","setGuesses","currentGuess","setCurrentGuess","gameOver","setGameOver","maxAttempts","handleChange","e","target","value","toUpperCase","handleSubmit","preventDefault","length","alert","feedback","getFeedback","newGuesses","word","correct","guess","present","targetArr","split","guessArr","targetLetterCount","forEach","letter","index","className","children","map","guessObj","onSubmit","type","onChange","maxLength","placeholder"],"sources":["/Users/admin/Desktop/word-guess-game/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './index.css';\n\n// Set the target word here\nconst TARGET_WORD = 'PLANT';\n\nconst App = () => {\n  const [guesses, setGuesses] = useState([]);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [gameOver, setGameOver] = useState(false);\n  const maxAttempts = 10;\n\n  const handleChange = (e) => {\n    setCurrentGuess(e.target.value.toUpperCase());\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (currentGuess.length !== 5) {\n      alert('Please enter a 5-letter word.');\n      return;\n    }\n\n    const feedback = getFeedback(currentGuess);\n    const newGuesses = [...guesses, { word: currentGuess, feedback }];\n    setGuesses(newGuesses);\n    setCurrentGuess('');\n\n    // Check for win or lose condition\n    if (feedback.correct === 5) {\n      setGameOver(true);\n      alert('You did great!');\n    } else if (newGuesses.length >= maxAttempts) {\n      setGameOver(true);\n      alert('Out of attempts! Better luck next time.');\n    }\n  };\n\n  const getFeedback = (guess) => {\n    let correct = 0;\n    let present = 0;\n    const targetArr = TARGET_WORD.split('');\n    const guessArr = guess.split('');\n    const targetLetterCount = {};\n\n    // Count occurrences of each letter in the target word\n    targetArr.forEach(letter => {\n      targetLetterCount[letter] = (targetLetterCount[letter] || 0) + 1;\n    });\n\n    // First pass: Count correct positions\n    guessArr.forEach((letter, index) => {\n      if (letter === targetArr[index]) {\n        correct++;\n        targetLetterCount[letter]--;\n        guessArr[index] = null; // Mark as matched\n      }\n    });\n\n    // Second pass: Count wrong positions\n    guessArr.forEach(letter => {\n      if (letter && targetLetterCount[letter] > 0) {\n        present++;\n        targetLetterCount[letter]--;\n      }\n    });\n\n    return { correct, present };\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Word Guess Game</h1>\n      <div className=\"board\">\n        {guesses.map((guessObj, index) => (\n          <div key={index} className=\"guess-row\">\n            <span className=\"guess-word\">{guessObj.word}</span>\n            <div className=\"feedback\">\n              {guessObj.feedback.correct > 0 && (\n                <div className=\"circle correct-circle\">{guessObj.feedback.correct}</div>\n              )}\n              {guessObj.feedback.present > 0 && (\n                <div className=\"circle present-circle\">{guessObj.feedback.present}</div>\n              )}\n              {guessObj.feedback.correct === 0 && guessObj.feedback.present === 0 && (\n                <div className=\"circle absent-circle\">0</div>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n      {!gameOver && (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            value={currentGuess}\n            onChange={handleChange}\n            maxLength=\"5\"\n            placeholder=\"Enter a 5-letter word\"\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}