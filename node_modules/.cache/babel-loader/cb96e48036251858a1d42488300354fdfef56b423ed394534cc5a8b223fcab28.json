{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/word-guess-game/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef } from 'react';\n// import wordExists from 'word-exists';\n// import './App.css';\n\n// const SECRET_WORD = 'PLANT';\n\n// const App = () => {\n//   const [inputs, setInputs] = useState(Array(5).fill(''));\n//   const [attempts, setAttempts] = useState([]);\n//   const [error, setError] = useState('');\n//   const [gameOver, setGameOver] = useState(false);\n//   const inputRefs = useRef([]);\n\n//   const checkDuplicate = (word) => {\n//     return new Set(word).size !== word.length;\n//   };\n\n//   const handleChange = (value, index) => {\n//     if (value.length > 1 || /[^a-zA-Z]/.test(value)) return;\n//     const newInputs = [...inputs];\n//     newInputs[index] = value.toUpperCase();\n//     setInputs(newInputs);\n//     setError('');\n\n//     if (value && index < 4) {\n//       inputRefs.current[index + 1].focus();\n//     }\n//   };\n\n//   const handleKeyDown = (e, index) => {\n//     if (e.key === 'Backspace') {\n//       const newInputs = [...inputs];\n//       if (inputs[index] === '' && index > 0) {\n//         newInputs[index - 1] = '';\n//         setInputs(newInputs);\n//         inputRefs.current[index - 1].focus();\n//       } else {\n//         newInputs[index] = '';\n//         setInputs(newInputs);\n//       }\n//     }\n//     if (e.key === 'Enter' && inputs.join('').length === 5) {\n//       handleSubmit(e);\n//     }\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     const guess = inputs.join('');\n\n//     if (checkDuplicate(guess)) {\n//       setError('Duplicate letters are not allowed!');\n//       return;\n//     }\n\n//     if (guess.length !== 5) {\n//       setError('Please enter a 5-letter word!');\n//       return;\n//     }\n\n//     if (!wordExists(guess.toLowerCase())) {\n//       setError('This word does not exist!');\n//       return;\n//     }\n\n//     let correct = 0;\n//     let misplaced = 0;\n\n//     guess.split('').forEach((letter, index) => {\n//       if (SECRET_WORD[index] === letter) {\n//         correct++;\n//       } else if (SECRET_WORD.includes(letter)) {\n//         misplaced++;\n//       }\n//     });\n\n//     setAttempts([...attempts, { guess, correct, misplaced }]);\n//     setInputs(Array(5).fill(''));\n\n//     if (correct === 5) {\n//       setGameOver(true);\n//     } else if (attempts.length + 1 === 10) {\n//       setGameOver(true);\n//     }\n\n//     // Reset focus to the first input box\n//     inputRefs.current[0].focus();\n//   };\n\n//   return (\n//     <div className=\"game-container\">\n//       <h1>Word Guess Game</h1>\n\n//       {attempts.map((attempt, index) => (\n//         <div key={index} className=\"attempt-row\">\n//           <span className=\"word\">{attempt.guess}</span>\n//           {attempt.correct > 0 && <span className=\"result green\">{attempt.correct}</span>}\n//           {attempt.misplaced > 0 && <span className=\"result yellow\">{attempt.misplaced}</span>}\n//         </div>\n//       ))}\n\n//       {!gameOver && (\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"input-boxes\">\n//             {inputs.map((letter, index) => (\n//               <input\n//                 key={index}\n//                 ref={(el) => (inputRefs.current[index] = el)}\n//                 type=\"text\"\n//                 maxLength=\"1\"\n//                 value={letter}\n//                 onChange={(e) => handleChange(e.target.value, index)}\n//                 onKeyDown={(e) => handleKeyDown(e, index)}\n//                 required\n//               />\n//             ))}\n//           </div>\n//           {error && <div className=\"error\">{error}</div>}\n//         </form>\n//       )}\n\n//       {gameOver && (\n//         <div className=\"game-over\">\n//           {attempts[attempts.length - 1].correct === 5 \n//             ? <p>You won! The word was: {SECRET_WORD}</p>\n//             : <p>Better luck next time! The word was: {SECRET_WORD}</p>\n//           }\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport wordExists from 'word-exists';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SECRET_WORD = 'PLANT';\nconst App = () => {\n  _s();\n  const [inputs, setInputs] = useState(Array(5).fill(''));\n  const [guesses, setGuesses] = useState([]);\n  const [error, setError] = useState('');\n  const inputRefs = useRef([]);\n  useEffect(() => {\n    inputRefs.current[0].focus();\n  }, []);\n  const handleChange = (index, value) => {\n    if (/^[A-Za-z]?$/.test(value)) {\n      const newInputs = [...inputs];\n      newInputs[index] = value.toUpperCase();\n      setInputs(newInputs);\n      if (value && index < 4) {\n        inputRefs.current[index + 1].focus();\n      }\n    }\n  };\n  const handleKeyDown = (index, event) => {\n    if (event.key === 'Backspace' && !inputs[index] && index > 0) {\n      inputRefs.current[index - 1].focus();\n    }\n    if (event.key === 'Enter') {\n      handleSubmit();\n    }\n  };\n  const handleSubmit = () => {\n    const word = inputs.join('');\n    if (word.length < 5) {\n      setError('Please enter a 5-letter word.');\n      return;\n    }\n    if (new Set(inputs).size !== inputs.length) {\n      setError('Duplicate letters are not allowed.');\n      return;\n    }\n    if (!wordExists(word.toLowerCase())) {\n      setError('This word does not exist.');\n      return;\n    }\n    setError('');\n    const correctPositions = inputs.filter((letter, i) => letter === SECRET_WORD[i]).length;\n    const correctLetters = inputs.filter(letter => SECRET_WORD.includes(letter)).length - correctPositions;\n    setGuesses([...guesses, {\n      word,\n      correctPositions,\n      correctLetters\n    }]);\n    setInputs(Array(5).fill(''));\n    inputRefs.current[0].focus();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Word Guess Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"guesses\",\n      children: guesses.map((guess, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"guess\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: guess.word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"feedback\",\n          children: [guess.correctPositions > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"circle green\",\n            children: guess.correctPositions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 17\n          }, this), guess.correctLetters > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"circle yellow\",\n            children: guess.correctLetters\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this), guess.correctPositions + guess.correctLetters === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"circle red\",\n            children: \"0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: inputs.map((value, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        maxLength: \"1\",\n        value: value,\n        ref: el => inputRefs.current[index] = el,\n        onChange: e => handleChange(index, e.target.value),\n        onKeyDown: e => handleKeyDown(index, e)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"taa6ZjXUwWaYSGNfUqF/apdbC+M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","wordExists","jsxDEV","_jsxDEV","SECRET_WORD","App","_s","inputs","setInputs","Array","fill","guesses","setGuesses","error","setError","inputRefs","current","focus","handleChange","index","value","test","newInputs","toUpperCase","handleKeyDown","event","key","handleSubmit","word","join","length","Set","size","toLowerCase","correctPositions","filter","letter","i","correctLetters","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","guess","type","maxLength","ref","el","onChange","e","target","onKeyDown","_c","$RefreshReg$"],"sources":["/Users/admin/Desktop/word-guess-game/src/App.js"],"sourcesContent":["// import React, { useState, useRef } from 'react';\n// import wordExists from 'word-exists';\n// import './App.css';\n\n// const SECRET_WORD = 'PLANT';\n\n// const App = () => {\n//   const [inputs, setInputs] = useState(Array(5).fill(''));\n//   const [attempts, setAttempts] = useState([]);\n//   const [error, setError] = useState('');\n//   const [gameOver, setGameOver] = useState(false);\n//   const inputRefs = useRef([]);\n\n//   const checkDuplicate = (word) => {\n//     return new Set(word).size !== word.length;\n//   };\n\n//   const handleChange = (value, index) => {\n//     if (value.length > 1 || /[^a-zA-Z]/.test(value)) return;\n//     const newInputs = [...inputs];\n//     newInputs[index] = value.toUpperCase();\n//     setInputs(newInputs);\n//     setError('');\n\n//     if (value && index < 4) {\n//       inputRefs.current[index + 1].focus();\n//     }\n//   };\n\n//   const handleKeyDown = (e, index) => {\n//     if (e.key === 'Backspace') {\n//       const newInputs = [...inputs];\n//       if (inputs[index] === '' && index > 0) {\n//         newInputs[index - 1] = '';\n//         setInputs(newInputs);\n//         inputRefs.current[index - 1].focus();\n//       } else {\n//         newInputs[index] = '';\n//         setInputs(newInputs);\n//       }\n//     }\n//     if (e.key === 'Enter' && inputs.join('').length === 5) {\n//       handleSubmit(e);\n//     }\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     const guess = inputs.join('');\n\n//     if (checkDuplicate(guess)) {\n//       setError('Duplicate letters are not allowed!');\n//       return;\n//     }\n\n//     if (guess.length !== 5) {\n//       setError('Please enter a 5-letter word!');\n//       return;\n//     }\n\n//     if (!wordExists(guess.toLowerCase())) {\n//       setError('This word does not exist!');\n//       return;\n//     }\n\n//     let correct = 0;\n//     let misplaced = 0;\n\n//     guess.split('').forEach((letter, index) => {\n//       if (SECRET_WORD[index] === letter) {\n//         correct++;\n//       } else if (SECRET_WORD.includes(letter)) {\n//         misplaced++;\n//       }\n//     });\n\n//     setAttempts([...attempts, { guess, correct, misplaced }]);\n//     setInputs(Array(5).fill(''));\n\n//     if (correct === 5) {\n//       setGameOver(true);\n//     } else if (attempts.length + 1 === 10) {\n//       setGameOver(true);\n//     }\n\n//     // Reset focus to the first input box\n//     inputRefs.current[0].focus();\n//   };\n\n//   return (\n//     <div className=\"game-container\">\n//       <h1>Word Guess Game</h1>\n\n//       {attempts.map((attempt, index) => (\n//         <div key={index} className=\"attempt-row\">\n//           <span className=\"word\">{attempt.guess}</span>\n//           {attempt.correct > 0 && <span className=\"result green\">{attempt.correct}</span>}\n//           {attempt.misplaced > 0 && <span className=\"result yellow\">{attempt.misplaced}</span>}\n//         </div>\n//       ))}\n\n//       {!gameOver && (\n//         <form onSubmit={handleSubmit}>\n//           <div className=\"input-boxes\">\n//             {inputs.map((letter, index) => (\n//               <input\n//                 key={index}\n//                 ref={(el) => (inputRefs.current[index] = el)}\n//                 type=\"text\"\n//                 maxLength=\"1\"\n//                 value={letter}\n//                 onChange={(e) => handleChange(e.target.value, index)}\n//                 onKeyDown={(e) => handleKeyDown(e, index)}\n//                 required\n//               />\n//             ))}\n//           </div>\n//           {error && <div className=\"error\">{error}</div>}\n//         </form>\n//       )}\n\n//       {gameOver && (\n//         <div className=\"game-over\">\n//           {attempts[attempts.length - 1].correct === 5 \n//             ? <p>You won! The word was: {SECRET_WORD}</p>\n//             : <p>Better luck next time! The word was: {SECRET_WORD}</p>\n//           }\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport wordExists from 'word-exists';\nimport './App.css';\n\nconst SECRET_WORD = 'PLANT';\n\nconst App = () => {\n  const [inputs, setInputs] = useState(Array(5).fill(''));\n  const [guesses, setGuesses] = useState([]);\n  const [error, setError] = useState('');\n  const inputRefs = useRef([]);\n\n  useEffect(() => {\n    inputRefs.current[0].focus();\n  }, []);\n\n  const handleChange = (index, value) => {\n    if (/^[A-Za-z]?$/.test(value)) {\n      const newInputs = [...inputs];\n      newInputs[index] = value.toUpperCase();\n      setInputs(newInputs);\n\n      if (value && index < 4) {\n        inputRefs.current[index + 1].focus();\n      }\n    }\n  };\n\n  const handleKeyDown = (index, event) => {\n    if (event.key === 'Backspace' && !inputs[index] && index > 0) {\n      inputRefs.current[index - 1].focus();\n    }\n    if (event.key === 'Enter') {\n      handleSubmit();\n    }\n  };\n\n  const handleSubmit = () => {\n    const word = inputs.join('');\n    if (word.length < 5) {\n      setError('Please enter a 5-letter word.');\n      return;\n    }\n\n    if (new Set(inputs).size !== inputs.length) {\n      setError('Duplicate letters are not allowed.');\n      return;\n    }\n\n    if (!wordExists(word.toLowerCase())) {\n      setError('This word does not exist.');\n      return;\n    }\n\n    setError('');\n    const correctPositions = inputs.filter((letter, i) => letter === SECRET_WORD[i]).length;\n    const correctLetters = inputs.filter((letter) => SECRET_WORD.includes(letter)).length - correctPositions;\n\n    setGuesses([...guesses, { word, correctPositions, correctLetters }]);\n    setInputs(Array(5).fill(''));\n    inputRefs.current[0].focus();\n  };\n\n  return (\n    <div className=\"game-container\">\n      <h1>Word Guess Game</h1>\n      <div className=\"guesses\">\n        {guesses.map((guess, index) => (\n          <div key={index} className=\"guess\">\n            <span>{guess.word}</span>\n            <div className=\"feedback\">\n              {guess.correctPositions > 0 && (\n                <div className=\"circle green\">{guess.correctPositions}</div>\n              )}\n              {guess.correctLetters > 0 && (\n                <div className=\"circle yellow\">{guess.correctLetters}</div>\n              )}\n              {guess.correctPositions + guess.correctLetters === 0 && (\n                <div className=\"circle red\">0</div>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n      <div className=\"input-container\">\n        {inputs.map((value, index) => (\n          <input\n            key={index}\n            type=\"text\"\n            maxLength=\"1\"\n            value={value}\n            ref={(el) => (inputRefs.current[index] = el)}\n            onChange={(e) => handleChange(index, e.target.value)}\n            onKeyDown={(e) => handleKeyDown(index, e)}\n          />\n        ))}\n      </div>\n      {error && <div className=\"error\">{error}</div>}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}